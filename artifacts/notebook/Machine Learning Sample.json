{
	"name": "Machine Learning Sample",
	"properties": {
		"folder": {
			"name": "Machine Learning"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool001",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5f1db674-8ab1-4ca9-90a7-84eb2a780e58"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7e416de3-c506-4776-8270-83fd73c6cc37/resourceGroups/cse-synapse-e2e-demo-rg-001/providers/Microsoft.Synapse/workspaces/csesynapsee2edemows001/bigDataPools/sparkpool001",
				"name": "sparkpool001",
				"type": "Spark",
				"endpoint": "https://csesynapsee2edemows001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool001",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 5,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Import the necessary modules**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"from datetime import datetime\r\n",
					"from dateutil import parser\r\n",
					"from pyspark.sql.functions import unix_timestamp, date_format, col, when\r\n",
					"from pyspark.ml import Pipeline\r\n",
					"from pyspark.ml import PipelineModel\r\n",
					"from pyspark.ml.feature import RFormula\r\n",
					"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\r\n",
					"from pyspark.ml.classification import LogisticRegression\r\n",
					"from pyspark.mllib.evaluation import BinaryClassificationMetrics\r\n",
					"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Construct the input DataFrame**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from azureml.opendatasets import NycTlcYellow\r\n",
					"\r\n",
					"end_date = parser.parse('2018-06-06')\r\n",
					"start_date = parser.parse('2018-05-01')\r\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
					"filtered_df = nyc_tlc.to_spark_dataframe()\r\n",
					"\r\n",
					"# To make development easier, faster, and less expensive, downsample for now\r\n",
					"sampled_taxi_df = filtered_df.sample(True, 0.001, seed=1234)\r\n",
					"\r\n",
					"#sampled_taxi_df.show(5)\r\n",
					"display(sampled_taxi_df)\r\n",
					"\r\n",
					"sampled_taxi_df.createOrReplaceTempView(\"nytaxi\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Prepare the data**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\r\n",
					"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\r\n",
					"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\r\n",
					"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\r\n",
					"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\r\n",
					"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\r\n",
					"                                )\\\r\n",
					"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\r\n",
					"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\r\n",
					"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\r\n",
					"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\r\n",
					"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\r\n",
					"                                & (sampled_taxi_df.rateCodeId <= 5)\r\n",
					"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\r\n",
					"                                )"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\r\n",
					"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\r\n",
					"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\r\n",
					"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\r\n",
					"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\r\n",
					"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\r\n",
					"                                                .otherwise(0).alias('trafficTimeBins')\r\n",
					"                                              )\\\r\n",
					"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Create a logistic regression model**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Because the sample uses an algorithm that works only with numeric features, convert them so they can be consumed\r\n",
					"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\")\r\n",
					"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\")\r\n",
					"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\")\r\n",
					"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\")\r\n",
					"\r\n",
					"# Create a new DataFrame that has had the encodings applied\r\n",
					"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Train a logistic regression model**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Decide on the split between training and testing data from the DataFrame\r\n",
					"trainingFraction = 0.7\r\n",
					"testingFraction = (1-trainingFraction)\r\n",
					"seed = 1234\r\n",
					"\r\n",
					"# Split the DataFrame into test and training DataFrames\r\n",
					"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create a new logistic regression object for the model\r\n",
					"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\r\n",
					"\r\n",
					"## The formula for the model\r\n",
					"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\r\n",
					"\r\n",
					"## Undertake training and create a logistic regression model\r\n",
					"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\r\n",
					"\r\n",
					"## Saving the model is optional, but it's another form of inter-session cache\r\n",
					"datestamp = datetime.now().strftime('%m-%d-%Y-%s')\r\n",
					"fileName = \"lrModel_\" + datestamp\r\n",
					"logRegDirfilename = fileName\r\n",
					"#lrModel.save(logRegDirfilename)\r\n",
					"\r\n",
					"## Predict tip 1/0 (yes/no) on the test dataset; evaluation using area under ROC\r\n",
					"predictions = lrModel.transform(test_data_df)\r\n",
					"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\r\n",
					"metrics = BinaryClassificationMetrics(predictionAndLabels)\r\n",
					"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Create a visual representation of the prediction**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Plot the ROC curve; no need for pandas, because this uses the modelSummary object\r\n",
					"modelSummary = lrModel.stages[-1].summary\r\n",
					"\r\n",
					"plt.plot([0, 1], [0, 1], 'r--')\r\n",
					"plt.plot(modelSummary.roc.select('FPR').collect(),\r\n",
					"         modelSummary.roc.select('TPR').collect())\r\n",
					"plt.xlabel('False Positive Rate')\r\n",
					"plt.ylabel('True Positive Rate')\r\n",
					"plt.show()"
				],
				"execution_count": 9
			}
		]
	}
}